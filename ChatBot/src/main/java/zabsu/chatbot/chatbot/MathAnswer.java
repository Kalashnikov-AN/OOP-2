package zabsu.chatbot.chatbot;

import java.util.Arrays;
import java.util.regex.Pattern;

/**
 * Класс MathAnswer реализует интерфейс {@link IAnswer} и предназначен для обработки
 * математических выражений с двумя операндами и одним арифметическим оператором.
 * <p>
 * При обнаружении входной строки, содержащей числа и оператор (например, "2+2"),
 * класс извлекает операнды, определяет оператор, выполняет вычисление и возвращает результат.
 * </p>
 */
public class MathAnswer implements IAnswer{

    /**
     * Регулярное выражение для проверки, содержит ли входная строка два числа, разделённых арифметическим оператором.
     * <p>
     * Данный шаблон означает, что строка должна содержать хотя бы одну цифру,
            * за которой могут следовать пробелы, затем один из символов +, -, * или /, опционально пробелы и затем ещё одну цифру.
     * </p>
            */
    public Pattern reg = Pattern.compile(".*\\d\\s*[-+*/]\\s*\\d.*");

    /**
     * Проверяет, соответствует ли входная строка шаблону математического выражения с операторами +, -, * или /.
     *
     * @param s входная строка для проверки
     * @return {@code true}, если строка соответствует шаблону, иначе {@code false}
     */
    @Override
    public boolean is_matched(String s) {
        return reg.matcher(s).matches();
    }

    /**
     * Обрабатывает входное строковое математическое выражение, вычисляет результат и возвращает его.
     * <p>
     * Метод выполняет следующие шаги:
     * <ol>
     *   <li>Определяет оператор (+, -, * или /) в строке.</li>
     *   <li>Разбивает строку на операнды, используя разделение по нецифровым символам.</li>
     *   <li>Преобразует полученные операнды в числа.</li>
     *   <li>В зависимости от оператора, выполняет соответствующее арифметическое действие.</li>
     *   <li>Если происходит деление на ноль, возвращает сообщение об ошибке.</li>
     *   <li>Возвращает результат вычисления в виде строки.</li>
     * </ol>
     * </p>
     *
     * @param s входное математическое выражение, например, "12+3" или "4.5 * 2"
     * @return строковое представление результата вычисления или сообщение об ошибке
     */
    @Override
    public String answer(String s) {
        char operator = ' ';
        // Перебираем символы строки, чтобы найти первый встреченный арифметический оператор
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
                operator = ch;
                break; // выходим из цикла после нахождения оператора
            }
        }
        String regex = "\\D";
        // Определяем разделитель для разбиения строки на операнды
        // Здесь используется "\\D+", что означает "один или более нецифровых символов"
        // Это обеспечивает извлечение только числовых частей строки
        String[] parts = s.split("\\D+");
        // Фильтруем пустые строки, которые могут появиться, если строка начинается с нецифрового символа
        String[] operands = Arrays.stream(parts) // превращаем массив строе в поток строк
                /*
                Поток - это последовательность элементов, поддерживающая различные операции обработки
                данных, такие как фильтрация, преобразование, сортировка и т.д.
                Ключевое преимущество потоков - это возможность делать операции обработки данных
                более декларативными, читаемыми и часто более эффективными,
                особенно при работе с большими объемами данных и параллельной обработке.
                 */
                .filter(str -> !str.isEmpty()) // фильтруем поток строк
                .toArray(String[]::new); // преобразуем поток обратно в массив
        // Преобразуем первые два операнда в числа (float)
        float a = Float.parseFloat(operands[0]);
        float b = Float.parseFloat(operands[1]);
        float result = 0;
        // Выбираем операцию в зависимости от оператора
        switch (operator) {
            case '+': result = a + b; break;
            case '-': result = a - b; break;
            case '*': result = a * b; break;
            case '/':
                if (b == 0) {
                    return "Ошибка: деление на ноль";
                }
                result = a / b;
                break;
        }
        // Возвращаем результат вычисления, преобразованный в строку
        return String.valueOf(result);
    }

}
